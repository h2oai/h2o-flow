@Library('test-shared-library@mr/ita/190-build-summary-emailer') _

import ai.h2o.ci.buildsummary.StagesSummary
import ai.h2o.ci.buildsummary.DetailsSummary
import ai.h2o.ci.BuildResult

BuildResult result = BuildResult.FAILURE

// initialize build summary
buildSummary('https://github.com/h2oai/h2o-flow', true)
// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

REGISTRY = 'docker.h2o.ai'
IMAGE = "${REGISTRY}/opsh2oai/h2o-flow-build"

MASTER_BRANCH = 'master'
REL_BRANCH_PREFIX = 'rel-'

def flowVersion = null

try {
    ansiColor('xterm') {
        timestamps {
            node('master') {
                buildSummary.stageWithSummary('Checkout') {
                    def final scmEnv = checkout scm
                    env.BRANCH_NAME = scmEnv['GIT_BRANCH'].replaceAll('origin/', '')
                    env.GIT_COMMIT = scmEnv['GIT_COMMIT']
                }

                buildSummary.stageWithSummary('Calculate Version') {
                    def final latestTag = sh(script: 'git describe --abbrev=0', returnStdout: true).trim()
                    def final lastVersionParts = latestTag.split('\\.')
                    def flowVersionMajor = readFile('VERSION_MAJOR.txt').trim()
                    if (flowVersionMajor != lastVersionParts[0..-2].join('.')) {
                        echo "Current major version is new, check if second number in version is as expected."
                        // The second number in expected version needs to be +1 from latest tag else throw error
                        currentSecondNum = Integer.parseInt(flowVersionMajor.split('\\.')[1])
                        latestSecondNum = Integer.parseInt(lastVersionParts[1])
                        expectedSecondNum = latestSecondNum + 1
                        if (currentSecondNum != expectedSecondNum) {
                            error "Latest tag should be 0.${expectedSecondNum}.# but was 0.${latestSecondNum}.#"
                        }
                        flowVersion = "${flowVersionMajor}.1"
                    } else {
                        echo "Current major version already exists, increment last number."
                        def final latestVersionMinor = Integer.parseInt(lastVersionParts.last())
                        flowVersion = "${flowVersionMajor}.${latestVersionMinor + 1}"
                    }
                    currentBuild.displayName = "v${flowVersion}"

                    echo "Check that tag ${flowVersion} does not exist."
                    final def tagExists = sh(script: "git rev-parse ${flowVersion} > /dev/null 2>&1", returnStatus: true) == 0
                    if (tagExists) {
                        error "Version ${flowVersion} already exists."
                    }

                    // setup custom DetailsSummary
                    DetailsSummary detailsSummary = new DetailsSummary()
                    detailsSummary.setEntry(this, 'Branch Name', env.BRANCH_NAME)
                    detailsSummary.setEntry(this, 'SHA', env.GIT_COMMIT)
                    detailsSummary.setEntry(this, 'Version', flowVersion)
                    buildSummary.get().addDetailsSummary(this, detailsSummary)

                    if (env.BRANCH_NAME != MASTER_BRANCH || env.BRANCH_NAME != REL_BRANCH_PREFIX) {
                        error "Can release only from ${MASTER_BRANCH} or ${REL_BRANCH_PREFIX}*"
                    }
                }

                buildSummary.stageWithSummary("Build") {
                    withCredentials([usernamePassword(credentialsId: REGISTRY, usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
                        sh "docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${REGISTRY}"
                        sh "docker pull ${IMAGE}"
                    }

                    timeout(time: 5, unit: 'MINUTES') {
                        docker.withRegistry("https://${REGISTRY}") {
                            docker.image(IMAGE).inside("--init") {
                                sh """
                                    env
                                    id

                                    ln -s /home/jenkins/flow-cache/node_modules/ ./node_modules
                                    ln -s /home/jenkins/flow-cache/lib/ ./lib

                                    make build
                                    sed -E "s/.+version.+/  \\"version\\": \\"$flowVersion\\",/" bower.json > bower.json.tmp && mv bower.json.tmp bower.json
                                    sed -E "s/999\\.999\\.999/$flowVersion/" build/js/flow.js > build/js/flow.js.tmp && mv build/js/flow.js.tmp build/js/flow.js
                                """
                            }
                        }
                    }
                }

                buildSummary.stageWithSummary("Commit and Push") {
                    sh """
                        git add .
                        git commit -m "Release $flowVersion"
                        git push --set-upstream origin ${env.BRANCH_NAME}
                        git tag -a $flowVersion -m "$flowVersion"
                        git push --tags
                    """
                }
            }
            result = BuildResult.SUCCESS
        }
    }
} finally {
    sendEmailNotif(result, buildSummary.get().toEmail(this), ['michalr@h2o.ai'])
}
